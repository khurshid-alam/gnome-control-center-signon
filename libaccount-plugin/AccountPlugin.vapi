/* AccountPlugin.vapi generated by vapigen-0.16, do not modify. */

[CCode (cprefix = "Ap", gir_namespace = "AccountPlugin", gir_version = "1.0", lower_case_cprefix = "ap_")]
namespace Ap {
	[CCode (cheader_filename = "libaccount-plugin/account-plugin.h", type_id = "ap_application_plugin_get_type ()")]
	public class ApplicationPlugin : GLib.Object {
		[CCode (has_construct_function = false)]
		protected ApplicationPlugin ();
		public virtual unowned Gtk.Widget build_widget ();
		public void emit_finished ();
		public unowned Ag.Account get_account ();
		public unowned Ag.Application get_application ();
		public unowned GLib.Error get_error ();
		public void set_error (GLib.Error error);
		public Ag.Account account { get; construct; }
		public Ag.Application application { get; construct; }
		public signal void finished ();
	}
	[CCode (cheader_filename = "libaccount-plugin/account-plugin.h", type_id = "ap_oauth_plugin_get_type ()")]
	public class OAuthPlugin : Ap.Plugin {
		[CCode (has_construct_function = false)]
		protected OAuthPlugin ();
		public void set_mechanism (Ap.OAuthMechanism mechanism);
		public void set_oauth_parameters (GLib.HashTable<string,GLib.Value?> oauth_params);
		public void set_account_oauth_parameters (GLib.HashTable<string,GLib.Value?> oauth_params);
		public unowned GLib.Variant get_oauth_reply ();
		protected virtual void query_username ();
		protected void store_account ();
		[NoAccessorMethod]
		public GLib.HashTable<weak void*,weak void*> oauth_params { owned get; construct; }
	}
	[CCode (cheader_filename = "libaccount-plugin/account-plugin.h", type_id = "ap_plugin_get_type ()")]
	public class Plugin : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Plugin ();
		public virtual void act_headless ();
		public virtual unowned Gtk.Widget build_widget ();
		public virtual async bool delete_account () throws GLib.Error;
		public void emit_finished ();
		public unowned Ag.Account get_account ();
		public unowned GLib.HashTable<string,string> get_cookies ();
		public unowned GLib.Error get_error ();
		public bool get_ignore_cookies ();
		public bool get_need_authentication ();
		public unowned string get_password ();
		public unowned Ag.Provider get_provider ();
		public bool get_user_cancelled ();
		public unowned string get_username ();
		public void set_cookies (GLib.HashTable<string,string> cookies);
		public void set_credentials (string username, string password);
		public void set_error (GLib.Error error);
		public void set_ignore_cookies (bool ignore_cookies);
		public void set_need_authentication (bool need_authentication);
		public void set_user_cancelled (bool cancelled);
		public Ag.Account account { get; construct; }
		public bool need_authentication { get; set; }
		public signal void finished ();
	}
	[CCode (cheader_filename = "libaccount-plugin/account-plugin.h", cprefix = "AP_OAUTH_MECHANISM_")]
	public enum OAuthMechanism {
		USER_AGENT,
		WEB_SERVER,
		HMAC_SHA1,
		PLAINTEXT,
		RSA_SHA1
	}
	[CCode (cheader_filename = "libaccount-plugin/account-plugin.h", cname = "AP_PLUGIN_CREDENTIALS_ID_FIELD")]
	public const string PLUGIN_CREDENTIALS_ID_FIELD;
	[CCode (cheader_filename = "libaccount-plugin/account-plugin.h")]
	public static bool client_has_plugin (Ag.Provider provider);
	[CCode (cheader_filename = "libaccount-plugin/account-plugin.h")]
	public static Ap.ApplicationPlugin client_load_application_plugin (Ag.Application application, Ag.Account account);
	[CCode (cheader_filename = "libaccount-plugin/account-plugin.h")]
	public static Ap.Plugin client_load_plugin (Ag.Account account);
	[CCode (cheader_filename = "libaccount-plugin/account-plugin.h")]
	public static GLib.Type module_get_object_type ();
}
